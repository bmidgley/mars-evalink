# Generated by Django 4.2.9

import os
import random
import string
from django.db import migrations


def create_campus_planner_station(apps, schema_editor):
    """Create a station named after the campus using CAMPUS environment variable"""
    Station = apps.get_model('evalink', 'Station')
    
    # Get campus name from environment variable
    campus_name = os.getenv('CAMPUS', 'Global')
    station_name = f'{campus_name} Planner'
    
    # Generate random data for required fields
    def generate_random_string(length):
        return ''.join(random.choices(string.ascii_letters + string.digits, k=length))
    
    def generate_random_number():
        return random.randint(1000000000000000, 9999999999999999)
    
    # Default coordinates (can be updated later)
    campus_lat = 38.4065268  # Default MDRS coordinates
    campus_lon = -110.7919148
    
    # Check if station already exists to avoid duplicates
    if not Station.objects.filter(name=station_name).exists():
        Station.objects.create(
            name=station_name,
            short_name=f'{campus_name[:8]}PLAN',  # Truncate campus name for short_name
            hardware_node=generate_random_string(16),
            hardware_number=generate_random_number(),
            station_type='planner',
            firmware='1.0.0',
            configuration={'type': 'planner', 'campus': campus_name},
            features={
                'type': 'Feature',
                'properties': {
                    'name': station_name,
                    'label': station_name,
                    'time': '2025-01-13T00:00:00Z',
                    'hardware': 0,
                    'node_type': 'planner',
                    'altitude': None,
                    'coordinates': [campus_lon, campus_lat],
                    'ground_speed': 0,
                    'ground_track': 0,
                    'temperature': None,
                    'relative_humidity': None,
                    'barometric_pressure': None,
                    'wind_direction': None,
                    'wind_speed': None,
                    'wind_gust': None,
                    'wind_lull': None,
                    'battery_level': None,
                    'voltage': None,
                    'current': None,
                    'texts': [],
                },
                'geometry': {
                    'type': 'Point',
                    'coordinates': [campus_lon, campus_lat]
                }
            }
        )


def reverse_create_campus_planner_station(apps, schema_editor):
    """Remove the campus planner station"""
    Station = apps.get_model('evalink', 'Station')
    
    # Delete all stations with 'Planner' in the name and 'planner' as station_type
    # This is more robust than relying on environment variable during rollback
    Station.objects.filter(
        name__contains='Planner',
        station_type='planner'
    ).delete()


class Migration(migrations.Migration):

    dependencies = [
        ('evalink', '0030_alter_campus_updated_at_alter_crew_updated_at_and_more'),
    ]

    operations = [
        migrations.RunPython(
            create_campus_planner_station,
            reverse_create_campus_planner_station,
        ),
    ]
